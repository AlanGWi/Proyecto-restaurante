<template>
  <HederViewVue></HederViewVue>
  <h1 class="mb-3">Ordenes</h1>

  <div class="container mx-auto text-center">
    <div class="accordion" id="accordionPedidos">
      <template v-for="(mesaPedidos, index) in mesasConPedidos" :key="index">
        <div class="card">
          <div class="card-header" :id="'mesa-' + mesaPedidos.numeroMesa">
            <h2 class="mb-0">
              <button class="accordion-button collapsed show" type="button" data-bs-toggle="collapse"
                      :data-bs-target="'#collapse-' + mesaPedidos.numeroMesa " 
                      aria-expanded="false" :aria-controls="'collapse-' + mesaPedidos.numeroMesa">
                Mesa {{ mesaPedidos.numeroMesa }}
              </button>
            </h2>
          </div>
          <div :id="'collapse-' + mesaPedidos.numeroMesa" class="collapse"
               :aria-labelledby="'mesa-' + mesaPedidos.numeroMesa"
               data-bs-parent="#accordionPedidos">
            <div class="card-body">
              <div class="table-responsive">
                <table class="table">
                  <thead>
                    <tr>
                      <th>Producto</th>
                      <th>Cantidad</th>
                      <th>Precio</th>
                      <th>Estado</th>
                      <th>Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="(pedido, index) in mesaPedidos.productos" :key="index">
                      <td>{{ pedido.nombre }}</td>
                      <td>{{ pedido.cantidad }}</td>
                      <td>${{ pedido.precio }}</td>
                      <td>{{ pedido.servido ? 'Servido' : 'Todavía no está servido' }}</td>
                      <td>
                        <button class="btn btn-primary boton-eliminar" 
                        data-bs-toggle="modal" 
                        data-bs-target="#eliminarPedidoModal"
                        @click="pedidoAEliminar = pedido._id">
                        Eliminar
                      </button>
                        <button class="btn btn-primary boton-servido mx-2" @click="actualizarPedido(pedido._id)">Servido</button>
                        <button class="btn btn-primary boton-sumar mx-1" @click="sumarCantidad(pedido); cargarPedidos();">+</button>
                        <button class="btn btn-primary boton-restar" @click="restarCantidad(pedido); cargarPedidos();">-</button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <button class="btn btn-primary" @click="finalizar(mesaPedidos)">Pedido Terminado</button>
            </div>
          </div>
        </div>
      </template>
    </div>
  </div>

  <div class="modal fade eliminar-pedido-modal"  id="eliminarPedidoModal" tabindex="-1" aria-labelledby="eliminarPedidoModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="eliminarPedidoModalLabel">Eliminar pedido</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ¿Estás seguro de que deseas eliminar este pedido?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" @click="confirmarEliminarPedido();cargarPedidos();">Confirmar</button>
      </div>
    </div>
  </div>
</div>
</template>
<script>


import axios from 'axios';
import HederViewVue from '@/components/HederView.vue';

export default {
  data() {
    return {
      pedidosPorMesa: [],
      token:"",
      pedidoAEliminar: null
      
    }
  },
  components:{
    HederViewVue
    },
  mounted() {
    this.cargarPedidos();
  },
  computed: {
  mesasConPedidos() {
    return this.pedidosPorMesa.map(mesa => {
      return {
        ...mesa,
        productos: mesa.productos.filter(pedido => !pedido.eliminado)
      }
    }).filter(mesa => mesa.productos.length > 0);
  }
},
  methods: {
    confirmarEliminarPedido() {
    this.eliminarPedido(this.pedidoAEliminar);
   
  },

eliminarPedido(pedidoId) {
  console.log(pedidoId);
  axios.delete(`http://localhost:3000/api/pedidos/${pedidoId}`, { 
    headers: { "Access-Control-Allow-Origin": "*" },
    params: { token: this.token } 
  })
  .then(this.cargarPedidos())
  .catch(error => {
    console.error('Error al eliminar el pedido:', error);
  });
},

   
    cargarPedidos() {
      this.token = localStorage.getItem("token");
      axios.get('http://localhost:3000/api/pedidos/pedidos')
        .then(response => {
          this.pedidosPorMesa = this.agruparPedidosPorMesa(response.data);
          
        })
        .catch(error => {
          console.error('Error al cargar los pedidos:', error);
        });
    },

    agruparPedidosPorMesa(pedidos) {
      const pedidosPorMesa = {};
      pedidos.forEach(pedido => {
        if (pedidosPorMesa[pedido.mesa]) {
          pedidosPorMesa[pedido.mesa].productos.push({
            nombre: pedido.nombre,
            cantidad: pedido.cantidad,
            precio: pedido.precio,
            eliminado: pedido.eliminado,
            servido: pedido.servido,
            _id:pedido._id
          });
        } else {
          pedidosPorMesa[pedido.mesa] = {
            numeroMesa: pedido.mesa,
            productos: [{
              nombre: pedido.nombre,
              cantidad: pedido.cantidad,
              precio: pedido.precio,
              eliminado: pedido.eliminado,
              servido: pedido.servido,
              _id:pedido._id
            }]
          };
        }
      });
      return Object.values(pedidosPorMesa);
    },
    actualizarPedido(id) {
      console.log(id)
      axios.put(`http://localhost:3000/api/pedidos/pedidos/${id}`, {
      servido: true,
      token:this.token
    })
      .then(
        // Actualizar la lista de pedidos
        this.cargarPedidos()
      
      )
      .catch(error => {
        console.error('Error al actualizar el pedido:', error);
      });

      
  },
  sumarCantidad(pedido) {
    axios.put(`http://localhost:3000/api/pedidos/pedidos/${pedido._id}`, {
      cantidad: parseInt(pedido.cantidad)+1,
      token:this.token
    })
    .then(
  
      this.cargarPedidos()
   
    )
    .catch(error => {
      console.error('Error al actualizar el pedido:', error);
    });
  },
  restarCantidad(pedido) {
    if (pedido.cantidad > 1) {
      axios.put(`http://localhost:3000/api/pedidos/pedidos/${pedido._id}`, {
        cantidad: parseInt(pedido.cantidad)-1,
        token:this.token
      })
      .then(
       
        this.cargarPedidos()
       
      )
      .catch(error => {
        console.error('Error al actualizar el pedido:', error);
      });
    }
  },


finalizar(mesaPedidos) {
  mesaPedidos.productos.forEach(pedido => {
    axios.put(`http://localhost:3000/api/pedidos/pedidos/${pedido._id}`, {
      eliminado: true,
      servido:true,
      token:this.token
    })
      .then(response => {
        console.log(response.statusText)
        location.reload();
      })
      .catch(error => {
        console.error('Error al actualizar el pedido:', error);
      });
  });
  this.cargarPedidos();
 
}   
  },
 
}
</script>

<style>
.boton-eliminar {
  background-color: red;
  color: white;
  border-color: transparent;
}

.boton-servido {
  background-color: green;
  color: white;
  border-color: transparent;
}

.boton-sumar, .boton-restar {
  background-color: blue;
  color: white;
}

.boton-sumar:hover, .boton-restar:hover {
  background-color: darkblue;
  color: white;
}

.table{

color: #040404;

tachment:fixed;
background-size:cover;
}

.accordion-button {
    background-color: rgb(0, 0, 0);
    color: white;
    height: 40%;
  }
  .card-header {
    
    background-color: rgb(0 0 0);
   
}

.modal {
  display: none; 
  position: fixed; 
  z-index: 1; 
  padding-top: 100px; 
  left: 0;
  top: 0;
  width: 100%; 
  height: 100%; 
  overflow: auto; 
  background-color: rgba(0, 0, 0, 0.4);
}
.eliminar-pedido-modal {
  /* Estilos específicos para este modal */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* ...otros estilos... */
  z-index: 21;
}
.modal-backdrop.show {
   
    z-index: 20;
}
</style>